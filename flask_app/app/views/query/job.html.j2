{% if auto_refresh %}
<meta http-equiv="Refresh" content="10" />
{% endif %}

{% extends "layout.html.j2" %}
{% block content %}
  {% include "basic_header.html.j2" %}

  {% if auto_refresh %}
  <div class="text-warning font-italic">this page will refresh every 10 seconds</div>
  {% endif %}

  <div class="row m-2">
    <div class="col">
      <div class="bs-component">
        <div class="card bg-{{ 'secondary' if job_status in ['PENDING', 'PROCESSING'] else ('success text-white' if job_status in ['PROCESSED'] else 'warning text-white') }}">
          <div class="card-header">
            <strong>Status:</strong>
            {{ job_status }}
          </div>
          <div class="card-body">
            <div class="row card-text">
              <div class="col-4">
                <strong>Submitted:</strong>
                <br />
                {{ job_submitted }}
              </div>
              <div class="col-4">
                <strong>Finished:</strong>
                <br />
                {{ job_finished if job_finished != "" else "n/a"}}
              </div>
              <div class="col-4">
                <strong>Query proteins:</strong>
                <br />
                <ul>
                {% for prot_id, prot_name in job_proteins.items() %}
                  <li>{{ prot_name }}</li>
                {% endfor %}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  {% if job_status in ['PROCESSED'] %}
  <div class="row m-2">
    <div class="col">
      <div class="bs-component">
        <div class="accordion">
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
              <button class="accordion-button" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                <strong>Results selection</strong>
              </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
              <div class="accordion-body" id="select_result">
                <div class="row">
                  <div class="col-6">
                    <div class="form-group mb-2">
                      <div class="m-1">
                        Show hits:
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_type" id="select_result_type_genome" value="genome" checked="">
                        <label class="form-check-label" for="select_result_type_genome">Genomes</label>
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_type" id="select_result_type_bgc" value="bgc">
                        <label class="form-check-label" for="select_result_type_bgc">Biosynthetic Gene Clusters (BGCs)</label>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="form-group mb-2">
                      <div class="m-1">
                        To protein(s):
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_protein" id="select_result_protein_all" value="0" checked="">
                        <label class="form-check-label" for="select_result_protein_all">All (will find genomes and BGCs with <strong>all of the protein hits present</strong>)</label>
                      </div>
                      {% for prot_id, prot_name in job_proteins.items() %}
                        <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_protein" id="select_result_protein_{{ prot_id }}" value="{{ prot_id }}">
                        <label class="form-check-label" for="select_result_protein_{{ prot_id }}">{{ prot_name }}</label>
                      </div>
                      {% endfor %}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
              <button class="accordion-button collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                <strong>Download</strong>
              </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo">
              <div class="accordion-body">
                ...
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

      <!-- by Genomes -->
      <div id="section_results_by_genome" class="d-none section_results">
        <div id="section_results_by_genome_summary" class="alert alert-primary"></div>
        <table id="section_results_by_genome_table" class="table table-striped table-bordered table-hover nowrap">
          <thead class="thead-light">
            <tr>
              <th>Detail</th>
              <th>Name</th>
              <th>Mash cluster</th>
              <th>Assembly quality</th>
              <th>GC content</th>
              <th>Num. of BGCs</th>
              <th>Known BGC hits</th>
            </tr>
          </thead>
          <tbody class="tbody">
          </tbody>
          <script type="text/javascript">
            $(document).ready(function(){
              $("#section_results_by_genome_table").DataTable({
                searching: false,
                ordering:  false,
                serverSide: false,
                responsive: false,
                processing: true,
                aLengthMenu: [[25, 50, 250], [25, 50, 250]],
                iDisplayLength: 25,
                columnDefs: [
                  { className: "text-center", targets: [0] },
                  { className: "text-end", targets: [4, 5, 6] },
                  {
                    targets: 0,
                    render: function(data, type, row, meta) {
                      let [genome_id, npdc_id] = data
                      return "<a href=\"{{ url_for('root.page') }}genomes/" + genome_id + "\"><button class=\"btn btn-primary\">NPDC-" + npdc_id + "</button></a>";
                    }
                  },
                  {
                    targets: 1,
                    render: function(data, type, row, meta) {
                      return "<i>" + data + "</i>";
                    }
                  },
                  {
                    targets: 3,
                    render: function(data, type, row, meta) {
                      let html_text = "";
                      let badge_class = {
                        "high": "rounded-pill bg-success",
                        "good": "bg-success",
                        "fair": "bg-secondary",
                        "fragmented": "bg-warning"
                      };
                      html_text += "<span class='badge m-1 " + badge_class[data["grade"]] + "'>" + data["grade"] + "</span>";
                      if (data["cleaned"]) {
                        html_text += "<span class='badge rounded-pill bg-info m-1'>" + "cleaned-up" + "</span>";
                      }
                      return html_text;
                    }
                  },
                  {
                    targets: 4,
                    render: function(data, type, row, meta) {
                      return data.toFixed(1) + " %";
                    }
                  },
                  {
                    targets: 6,
                    render: function(data, type, row, meta) {
                      return data.length;
                    }
                  }
                ]
              });
            });
          </script>
        </table>
      </div>

  <div class="row">
    <div class="col">
      <div class="h3 btn-secondary text-center p-2">Results</div>
    </div>
  </div>

  <div class="row">
    <div class="col">

      <!-- by BGC -->
      <div id="section_results_by_bgc" class="d-none section_results">
        <div id="section_results_by_bgc_summary" class="alert alert-primary"></div>
        <table id="section_results_by_bgc_table" class="table table-striped table-bordered table-hover nowrap">
          <thead class="thead-light">
            <tr>
              <th>Genome</th>
              <th>Name</th>
              <th>Mash cluster</th>
              <th>GCF</th>
              <th>BGC quality</th>
              <th>BGC class</th>
              <th>Size (kb)</th>
              <th>Num. of genes</th>
            </tr>
          </thead>
          <tbody class="tbody">
          </tbody>
          <script type="text/javascript">
            $(document).ready(function(){
              $("#section_results_by_bgc_table").DataTable({
                searching: false,
                ordering:  false,
                serverSide: false,
                responsive: false,
                processing: true,
                aLengthMenu: [[25, 50, 250], [25, 50, 250]],
                iDisplayLength: 25,
                "columnDefs": [
                  { className: "text-center", targets: [0] },
                  { className: "text-end", targets: [6, 7] },
                  {
                    targets: 0,
                    render: function(data, type, row, meta) {
                      let [genome_id, npdc_id] = data
                      return "<a href=\"{{ url_for('root.page') }}gdb/genomes/" + genome_id + "\"><button class=\"btn btn-primary\">NPDC-" + npdc_id + "</button></a>";
                    }
                  },
                  {
                    targets: 1,
                    render: function(data, type, row, meta) {
                      return "<i>" + data + "</i>";
                    }
                  },
                  {
                    targets: 3,
                    render: function(data, type, row, meta) {
                      return "GCF-" + data;
                    }
                  },
                  {
                    targets: 4,
                    render: function(data, type, row, meta) {
                      let html_text = "";
                      let badge_class = {
                        1: ["fragmented", "rounded-pill bg-warning"],
                        0: ["complete", "rounded-pill bg-success"]
                      };
                      html_text += "<span class='badge m-1 " + badge_class[data][1] + "'>" + badge_class[data][0] + "</span>";
                      return html_text;
                    }
                  },
                  {
                    "targets": 5,
                    render: function(data, type, row, meta) {
                      let html_text = "<ul class=\"list-unstyled mb-0\">";
                      data.forEach((bgc_class) => {
                        html_text += "<li>" + bgc_class + "</li>";
                      });
                      html_text += "</ul>";
                      return html_text;
                    }
                  }
                ]
              });
            });
          </script>
        </table>
      </div>

    </div>
  </div>

  <script type="text/javascript">
    $(document).ready(function(){

      function updateShowResult() {
        let show_result = ($("input[name='select_result_type']:checked").val());

        // destroy current summary boxes
        $("#section_results_by_genome_summary").html("<center><strong>loading data..</center></strong>");
        $("#section_results_by_bgc_summary").html("<center><strong>loading data..</center></strong>");

        // clear current dataTables
        $('#section_results_by_genome_table').DataTable().clear().draw();
        $('#section_results_by_bgc_table').DataTable().clear().draw();

        // show specific section
        $(".section_results").addClass("d-none");
        $("#section_results_by_" + show_result).removeClass("d-none");

        // process data
        $.ajax({
          url: "{{ url_for('root.page') }}api/query/get_results_list",
          dataType: "json",
          data: {
            "jobid": {{ job_id }},
            "protid": ($("input[name='select_result_protein']:checked").val()),
            "type": show_result
          },
          success: function (response) {
            let summary_content = "";
            let datatable_data = [];

            switch(show_result) {
              case "genome":
                // update summary
                summary_content = "0 hits found."
                if (response["id"].length > 0) {
                  let count_genome = response["id"].length;
                  let count_species = new Set(response["genome_mash_species"]).size;
                  let count_most_genus = "";
                  let count_most_genus_pct = 0;
                  $.each(response["genome_gtdb_genus"].reduce(function (acc, curr) {
                    return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc
                  }, {}), function(genus, count) {
                    if ((count > count_most_genus_pct) || (count_most_genus_pct == 0)) {
                      count_most_genus = genus;
                      count_most_genus_pct = count;
                    }
                  });
                  count_most_genus_pct = (count_most_genus_pct / count_genome * 100).toFixed(0);
                  summary_content = (
                    "Your query is found in <strong>" + count_genome + "</strong> genome(s) of <strong>" + count_species + "</strong> different species." +
                    " Most of the genome(s), <strong>" + count_most_genus_pct + "%</strong>, were coming from" +
                    " the genus <strong><i>" + count_most_genus + "</i></strong>."
                  )
                }

                // update datatables
                datatable_data = [];
                $.each(response["id"], function(i, genome_id) {
                  datatable_data.push([
                    [genome_id, response["npdc_id"][i]],
                    response["genome_gtdb_species"][i] != ""? response["genome_gtdb_species"][i]:(response["genome_gtdb_genus"][i] + " spp."),
                    response["genome_mash_species"][i],
                    {
                        "grade": response["grade"][i],
                        "cleaned": response["is_cleaned_up"][i],
                    },
                    response["genome_gc"][i],
                    response["bgcs"][i] == "" ? 0 : (new Set(response["bgcs"][i].split(","))).size,
                    response["mibig_bgcs"][i] == null ? "" : Array.from(new Set(response["mibig_bgcs"][i].split(";")))
                  ]);
                });
                break;

              case "bgc":
                // update summary
                /*
          Your query is found in <strong>1,000</strong> BGCs, forming a total of <strong>100</strong> GCFs.
          The main biosynthetic class of the BGCs is <strong>Polyketide (50%)</strong>.
          These BGCs were coming from <strong>1,000</strong> genomes of <strong>500</strong> different species
          (most of the genomes, <strong>xx% </strong>, were coming from the genus <strong><i>Streptomyces</i></strong>).*/
                summary_content = "0 hits found."
                if (response["id"].length > 0) {
                  let count_bgc = response["id"].length;
                  let count_gcf = new Set(response["gcf"]).size;
                  let count_genome = new Set(response["genome_id"]).size;
                  let count_species = new Set(response["genome_mash_species"]).size;
                  let count_most_class = "";
                  let count_most_class_pct = 0;
                  let count_class = {};
                  $.each(response["bgc_class"], function(i, class_str) {
                    class_str = Array.from(new Set(class_str.split(";"))).sort();
                    class_str = [class_str.join("/")]; // comment for per-class splits
                    $.each(class_str, function(j, class_name) {
                      count_class[class_name] ? ++count_class[class_name] : count_class[class_name] = 1
                    })
                  });
                  $.each(count_class, function(class_name, count) {
                    if ((count > count_most_class_pct) || (count_most_class_pct == 0)) {
                      count_most_class = class_name;
                      count_most_class_pct = count;
                    }
                  });
                  count_most_class_pct = (count_most_class_pct / count_bgc * 100).toFixed(0);
                  let count_most_genus = "";
                  let count_most_genus_pct = 0;
                  $.each(response["genome_gtdb_genus"].reduce(function (acc, curr) {
                    return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc
                  }, {}), function(genus, count) {
                    if ((count > count_most_genus_pct) || (count_most_genus_pct == 0)) {
                      count_most_genus = genus;
                      count_most_genus_pct = count;
                    }
                  });
                  count_most_genus_pct = (count_most_genus_pct / count_genome * 100).toFixed(0);
                  summary_content = (
                    "Your query is found in <strong>" + count_bgc + "</strong> BGC(s), forming a total of <strong>" + count_gcf + "</strong> GCF(s)." +
                    "The main biosynthetic class of the BGCs is <strong>" + count_most_class + " (" + count_most_class_pct + "%)</strong>." +
                    " These BGCs were coming from  <strong>" + count_genome + "</strong> genome(s) of <strong>" + count_species + "</strong> different species." +
                    " Most of the BGCs, <strong>" + count_most_genus_pct + "%</strong>, were coming from" +
                    " the genus <strong><i>" + count_most_genus + "</i></strong>."
                  )
                }

                // update datatables
                $.each(response["id"], function(i, bgc_id) {
                  datatable_data.push([
                    [response["genome_id"][i], response["npdc_id"][i]],
                    response["genome_gtdb_species"][i] != ""? response["genome_gtdb_species"][i]:(response["genome_gtdb_genus"][i] + " spp."),
                    response["genome_mash_species"][i],
                    response["gcf"][i],
                    response["fragmented"][i],
                    Array.from(new Set(response["bgc_class"][i].split(";"))).sort(),
                    ((response["nt_end"][i] - response["nt_start"][i]) / 1000).toFixed(0),
                    response["num_cds"][i]
                  ]);
                });
                break;
            }
            
            $("#section_results_by_" + show_result + "_summary").html(summary_content);
            $("#section_results_by_" + show_result + "_table").DataTable().rows.add(datatable_data).draw();
          }
        });

      }

      $("#select_result * input").on("change", function() { updateShowResult(); });
      updateShowResult();
    });
  </script>
  {% endif%}

{% endblock %}