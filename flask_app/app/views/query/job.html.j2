{% if auto_refresh %}
<meta http-equiv="Refresh" content="10" />
{% endif %}

{% extends "layout.html.j2" %}
{% block content %}
  {% include "basic_header.html.j2" %}

  {% if auto_refresh %}
  <div class="text-warning font-italic">this page will refresh every 10 seconds</div>
  {% endif %}

  <div class="row m-2">
    <div class="col">
      <div class="bs-component">
        <div class="card bg-{{ 'secondary' if job_status in ['PENDING', 'PROCESSING'] else ('success text-white' if job_status in ['PROCESSED'] else 'warning text-white') }}">
          <div class="card-header">
            <strong>Status:</strong>
            {{ job_status }}
          </div>
          <div class="card-body">
            <div class="row card-text">
              <div class="col-4">
                <strong>Submitted:</strong>
                <br />
                {{ job_submitted }}
              </div>
              <div class="col-4">
                <strong>Finished:</strong>
                <br />
                {{ job_finished if job_finished != "" else "n/a"}}
              </div>
              <div class="col-4">
                <strong>Query proteins:</strong>
                <br />
                <ul>
                {% for prot_id, prot_name in job_proteins.items() %}
                  <li>{{ prot_name }}</li>
                {% endfor %}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  {% if job_status in ['PROCESSED'] %}
  <div class="row m-2">
    <div class="col">
      <div class="bs-component">
        <div class="accordion">
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingOne">
              <button class="accordion-button" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                <strong>Results selection</strong>
              </button>
            </h2>
            <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
              <div class="accordion-body" id="select_result">
                <div class="row">
                  <div class="col-6">
                    <div class="form-group mb-2">
                      <div class="m-1">
                        Show hits:
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_type" id="select_result_type_genome" value="genome">
                        <label class="form-check-label" for="select_result_type_genome">Genomes</label>
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_type" id="select_result_type_bgc" value="bgc" checked="">
                        <label class="form-check-label" for="select_result_type_bgc">Biosynthetic Gene Clusters (BGCs)</label>
                      </div>
                    </div>
                  </div>
                  <div class="col-6">
                    <div class="form-group mb-2">
                      <div class="m-1">
                        To protein(s):
                      </div>
                      <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_protein" id="select_result_protein_all" value="0" checked="">
                        <label class="form-check-label" for="select_result_protein_all">All (will find genomes and BGCs with <strong>all of the protein hits present</strong>)</label>
                      </div>
                      {% for prot_id, prot_name in job_proteins.items() %}
                        <div class="form-check">
                        <input class="form-check-input" type="radio" name="select_result_protein" id="select_result_protein_{{ prot_id }}" value="{{ prot_id }}">
                        <label class="form-check-label" for="select_result_protein_{{ prot_id }}">{{ prot_name }}</label>
                      </div>
                      {% endfor %}
                    </div>
                  </div>
                </div>
                <div class="row mt-4">
                  <div class="col-8">
                    <p id="select_result_selected_text"></p>
                  </div>
                  <div class="col-4 text-end">
                    <button class="btn btn-primary" id="select_result_update_btn">Update</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="accordion-item">
            <h2 class="accordion-header" id="headingTwo">
              <button class="accordion-button collapsed" type="button" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">
                <strong>Download</strong>
              </button>
            </h2>
            <div id="collapseTwo" class="accordion-collapse collapse" aria-labelledby="headingTwo">
              <div class="accordion-body">
                <div class="row text-center blast_result_download_btn_progress d-none">
                  <div class="col">
                    Processing download request, please wait..
                    <div class='spinner-border' role='status'></div>
                  </div>
                </div>
                <div class="row text-center blast_result_download_btn_container d-none">
                  <div class="col">
                    <div class="row">
                      <div class="col">
                        Please select the files you want to download below. If you have previously submitted a download request and it have finished processing, you can click the same button again to download the files.
                      </div>
                    </div>
                    <div class="row m-2">
                      <div class="col">
                        <button class="btn btn-primary m-2 blast_result_download_btn" dltype="blast_table">
                          Download BLAST tabular result (.txt)
                        </button>
                        <button class="btn btn-primary m-2 blast_result_download_btn" dltype="fasta_proteins">
                          Download protein hits multiFASTA
                        </button>
                        <button class="btn btn-primary m-2 blast_result_download_btn" dltype="fasta_bgcs">
                          Download BGC hits multiFASTA
                        </button>
                      </div>
                    </div>
                    <div class="row">
                      <div class="col">
                        For downloading genomes and BGCs, please go to their respective detail page (click on the genome/BGC names on the table below).
                      </div>
                    </div>

                    <script type="text/javascript">
                      function checkDownloads() {
                        $.ajax({
                          url: "{{ url_for("query.page_download_result", job_id=job_id) }}" +
                                "?action=check",
                          datatype: "text",
                          failure: function(response) {
                            alert("fail to fetch data, please refresh the page.");
                          },
                          success: function (response) {
                            if (response == "pending_processing") {
                              $(".blast_result_download_btn_container").addClass("d-none");
                              $(".blast_result_download_btn_progress").removeClass("d-none");
                              setTimeout(checkDownloads, 5000);
                            } else {
                              $(".blast_result_download_btn_progress").addClass("d-none");
                              $(".blast_result_download_btn_container").removeClass("d-none");
                            }
                          }
                        })
                      }

                      $(document).ready(function() {
                        checkDownloads();
                        $(".blast_result_download_btn").click(function() {
                          let file_type = $(this).attr("dltype");
                          switch (file_type) {
                            case "fasta_bgcs":
                              let selected_prot = $("input[name='select_result_protein']:checked");
                              let prot_ids = [selected_prot.val()];
                              if (prot_ids[0] == "0") {
                                prot_ids = [];
                                $("input[name='select_result_protein']").each(function() {
                                  let prot_id = $(this).val();
                                  if (prot_id != "0") {
                                    prot_ids.push(prot_id);
                                  }
                                });
                              }
                              $.ajax({
                                url: "{{ url_for("query.page_download_result", job_id=job_id) }}" +
                                "?filetype=" + file_type + "&query_prot_ids=" + prot_ids.join(",") +
                                "&action=prepare",
                                dataType: "text",
                                data: {},
                                indexValue: { file_type: file_type, prot_ids: prot_ids },
                                failure: function(response) {
                                  alert("fail to fetch data, please refresh the page.")
                                },
                                success: function (response) {
                                  hideModal();
                                  switch (response) {
                                    case "pending_processing":
                                    case "processed":
                                      checkDownloads();
                                      break;
                                    case "wrong_request":
                                      alert("fail to fetch data, please refresh the page.");
                                      break;
                                    case "ready":
                                      location.href = "{{ url_for("query.page_download_result", job_id=job_id) }}" +
                                        "?filetype=" + this.indexValue.file_type + "&query_prot_ids=" + this.indexValue.prot_ids.join(",") +
                                        "&action=download";
                                      break;
                                  }
                                }
                              });
                              break;
                            case "blast_table":
                            case "fasta_proteins":
                              let modal_content = "";
                              $("input[name='select_result_protein']").each(function() {
                                let prot_id = $(this).val();
                                let prot_name = $(this).next(".form-check-label").text();
                                if (prot_id != "0") {
                                  modal_content += "<div class='row text-center m-2'>";
                                  modal_content += "<div class='col'>" + 
                                    "<button class='btn btn-primary btn_download_blast_hits' protid='" +
                                     prot_id +
                                     "'>" + prot_name + "</button>" +
                                    "</div>";
                                  modal_content += "</div>";
                                }
                              });
                              showModal("Select protein query:", modal_content, on_show=function(){
                                $(".btn_download_blast_hits").click(function() {
                                  $.ajax({
                                    url: "{{ url_for('query.page_download_result', job_id=job_id) }}" +
                                      "?filetype=" + file_type +
                                      "&query_prot_id=" + $(this).attr("protid") +
                                      "&action=prepare",
                                    dataType: "text",
                                    data: {},
                                    indexValue: { file_type: file_type, protid: $(this).attr("protid") },
                                    failure: function(response) {
                                      alert("fail to fetch data, please refresh the page.")
                                    },
                                    success: function (response) {
                                      hideModal();
                                      switch (response) {
                                        case "pending_processing":
                                        case "processed":
                                          checkDownloads();
                                          break;
                                        case "wrong_request":
                                          alert("fail to fetch data, please refresh the page.");
                                          break;
                                        case "ready":
                                          location.href = "{{ url_for("query.page_download_result", job_id=job_id) }}" +
                                            "?filetype=" + this.indexValue.file_type + "&query_prot_id=" + this.indexValue.protid +
                                            "&action=download";
                                          break;
                                      }
                                    }
                                  });
                                });
                              }, on_close=function(){})
                              break;
                          }
                        });
                      });
                    </script>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <div class="row">
    <div class="col">
      <div class="h3 btn-secondary text-center p-2">Results</div>
    </div>
  </div>

  <div class="row">
    <div class="col">

      <!-- by Genomes -->
      <div id="section_results_by_genome" class="d-none section_results">
        <div id="section_results_by_genome_summary" class="alert alert-success"></div>
        <table id="section_results_by_genome_table" class="table table-striped table-bordered table-hover nowrap">
          <thead class="thead-light">
            <tr>
              <th>Avg. %identity</th>
              <th>Genome</th>
              <th>Name</th>
              <th>Mash cluster</th>
              <th>Assembly quality</th>
              <th>GC content</th>
              <th>Num. of BGCs</th>
              <th>Known BGC hits</th>
            </tr>
          </thead>
          <tbody class="tbody">
          </tbody>
          <script type="text/javascript">
            $(document).ready(function(){
              $("#section_results_by_genome_table").DataTable({
                searching: true,
                ordering:  true,
                serverSide: false,
                responsive: true,
                processing: true,
                aLengthMenu: [[25, 50, 250], [25, 50, 250]],
                iDisplayLength: 25,
                columnDefs: [
                  { className: "text-center", targets: [1] },
                  { className: "text-end", targets: [0, 5, 6, 7] },
                  {
                    targets: 0,
                    render: function(data, type, row, meta) {
                      return data.toFixed(1) + "%";
                    }
                  },                  
                  {
                    targets: 1,
                    render: function(data, type, row, meta) {
                      let [genome_id, npdc_id] = data
                      return "<a href=\"{{ url_for('root.page') }}genomes/view/" + genome_id + "\"><button class=\"btn btn-primary\">NPDC-" + npdc_id + "</button></a>";
                    }
                  },
                  {
                    targets: 2,
                    render: function(data, type, row, meta) {
                      return "<i><strong style='color: #222266;'>" + data + "</strong></i>";
                    }
                  },
                  {
                    targets: 4,
                    render: function(data, type, row, meta) {
                      let html_text = "";
                      let badge_class = {
                        "high": "rounded-pill bg-success",
                        "good": "bg-success",
                        "fair": "bg-secondary",
                        "fragmented": "bg-warning"
                      };
                      html_text += "<span class='badge m-1 " + badge_class[data["grade"]] + "'>" + data["grade"] + "</span>";
                      if (data["cleaned"]) {
                        html_text += "<span class='badge rounded-pill bg-info m-1'>" + "cleaned-up" + "</span>";
                      }
                      return html_text;
                    }
                  },
                  {
                    targets: 5,
                    render: function(data, type, row, meta) {
                      return data.toFixed(1) + " %";
                    }
                  },
                  {
                    targets: 7,
                    render: function(data, type, row, meta) {
                      return data.length;
                    }
                  }
                ]
              });
            });
            $("#section_results_by_genome_table").width("100%");
          </script>
        </table>
      </div>

      <!-- by BGC -->
      <div id="section_results_by_bgc" class="d-none section_results">
        <div id="section_results_by_bgc_summary" class="alert alert-success"></div>
        <table id="section_results_by_bgc_table" class="table table-striped table-bordered table-hover nowrap">
          <thead class="thead-light">
            <tr>
              <th>Avg. %identity</th>
              <th>Genome</th>
              <th>Name</th>
              <th>Mash cluster</th>
              <th>Contig</th>
              <th>BGC</th>
              <th>GCF</th>
              <th>BGC quality</th>
              <th>BGC class</th>
              <th>Size (kb)</th>
              <th>Num. of genes</th>
              <th>MIBiG hit</th>
            </tr>
          </thead>
          <tbody class="tbody">
          </tbody>
          <script type="text/javascript">
            $(document).ready(function(){
              $("#section_results_by_bgc_table").DataTable({
                searching: true,
                ordering:  true,
                serverSide: false,
                responsive: true,
                processing: true,
                aLengthMenu: [[25, 50, 250], [25, 50, 250]],
                iDisplayLength: 25,
                "columnDefs": [
                  { className: "text-center", targets: [1, 5] },
                  { className: "text-end", targets: [0, 9, 10] },
                  { visible: false, searchable: false, targets: [4, 10] },
                  {
                    targets: 0,
                    render: function(data, type, row, meta) {
                      return data.toFixed(1) + "%";
                    }
                  },
                  {
                    targets: 1,
                    render: function(data, type, row, meta) {
                      let [genome_id, npdc_id] = data;
                      let label = "NPDC-" + npdc_id;
                      return "<a href=\"{{ url_for('root.page') }}genomes/view/" + genome_id + "\"><button class=\"btn btn-primary\">" + label + "</button></a>";
                    }
                  },
                  {
                    targets: 2,
                    render: function(data, type, row, meta) {
                      return "<i>" + data + "</i>";
                    }
                  },
                  {
                    targets:5,
                    render: function(data, type, row, meta) {
                      let [bgc_id, npdc_id, contig_num, region_name] = data;
                      let bgc_num = parseInt(region_name.split("region")[1], 10);
                      let label = "NPDC-" + npdc_id + ":" + "r" + contig_num + "c" + bgc_num;                      
                      return "<a href=\"{{ url_for('root.page') }}bgcs/view/" + bgc_id + "\"><button class=\"btn btn-primary\">" + label + "</button></a>";
                    }
                  },
                  {
                    targets: 6,
                    render: function(data, type, row, meta) {
                      return "GCF-" + data;
                    }
                  },
                  {
                    targets: 7,
                    render: function(data, type, row, meta) {
                      let html_text = "";
                      let badge_class = {
                        1: ["fragmented", "rounded-pill bg-warning"],
                        0: ["complete", "rounded-pill bg-success"]
                      };
                      html_text += "<span class='badge m-1 " + badge_class[data][1] + "'>" + badge_class[data][0] + "</span>";
                      return html_text;
                    }
                  },
                  {
                    "targets": 8,
                    render: function(data, type, row, meta) {
                      let html_text = "<ul class=\"list-unstyled mb-0\">";
                      data.forEach((bgc_class) => {
                        html_text += "<li>" + bgc_class + "</li>";
                      });
                      html_text += "</ul>";
                      return html_text;
                    }
                  },
                  {
                    "targets": 11,
                    render: function(data, type, row, meta) {
                      let [mibig_id, mibig_name, mibig_pct, cb_cutoff] = data;
                      let html_text = "n/a";

                      if (mibig_id > -1) {
                        html_text = "<a href='https://mibig.secondarymetabolites.org/repository/BGC" + String(mibig_id).padStart(7, '0') + "'>" + mibig_name + "</a>" + " (" + mibig_pct + "%)";
                        if (mibig_pct >= cb_cutoff) {
                          html_text = "<strong style='color: #222266;'>" + html_text + "</strong>";
                        } else {
                          html_text = "<i style='color: #999999;'>" + html_text + "</i>";
                        }
                      }

                      return html_text;
                    }
                  }
                ]
              });
            });
            $("#section_results_by_bgc_table").width("100%");
          </script>
        </table>
      </div>

    </div>
  </div>

  <script type="text/javascript">
    $(document).ready(function(){

      function updateShowResult() {
        let selected_type = $("input[name='select_result_type']:checked");
        let show_result = selected_type.val();
        let selected_prot = $("input[name='select_result_protein']:checked");
        let prot_id = selected_prot.val();

        // disable button
        $("#select_result_update_btn").addClass("disabled");

        // destroy current summary boxes
        $("#section_results_by_genome_summary").removeClass("alert-success");
        $("#section_results_by_bgc_summary").removeClass("alert-success");
        $("#section_results_by_genome_summary").addClass("alert-warning");
        $("#section_results_by_bgc_summary").addClass("alert-warning");
        $("#section_results_by_genome_summary").html("<center>loading data..<br /><div class='spinner-border' role='status'></div></center>");
        $("#section_results_by_bgc_summary").html("<center>loading data..<br /><div class='spinner-border' role='status'></div></center>");

        // clear current dataTables
        $('#section_results_by_genome_table').DataTable().clear().draw();
        $('#section_results_by_bgc_table').DataTable().clear().draw();

        // show specific section
        $(".section_results").addClass("d-none");
        $("#section_results_by_" + show_result).removeClass("d-none");

        // process data
        $.ajax({
          url: "{{ url_for('root.page') }}api/query/get_results_list",
          dataType: "json",
          data: {
            "jobid": {{ job_id }},
            "protid": prot_id,
            "type": show_result
          },
          failure: function(response) {
            alert("fail to fetch data, please refresh the page.")
            $("#select_result_update_btn").removeClass("disabled");
          },
          success: function (response) {
            let summary_content = "";
            let datatable_data = [];

            switch(show_result) {
              case "genome":
                // update summary
                summary_content = "0 hits found."
                if (response["id"].length > 0) {
                  let count_genome = response["id"].length;
                  let count_species = new Set(response["genome_mash_species"]).size;
                  let count_most_genus = "";
                  let count_most_genus_pct = 0;
                  $.each(response["genome_gtdb_genus"].reduce(function (acc, curr) {
                    return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc
                  }, {}), function(genus, count) {
                    if ((count > count_most_genus_pct) || (count_most_genus_pct == 0)) {
                      count_most_genus = genus;
                      count_most_genus_pct = count;
                    }
                  });
                  count_most_genus_pct = (count_most_genus_pct / count_genome * 100).toFixed(0);
                  summary_content = (
                    "Your query is found in <strong>" + count_genome.toLocaleString("en-US") + "</strong> genome(s) of <strong>" + count_species.toLocaleString("en-US") + "</strong> different Mash cluster(s)." +
                    " Most of the genome(s), <strong>" + count_most_genus_pct.toLocaleString("en-US") + "%</strong>, were coming from" +
                    " the genus <strong><i>" + count_most_genus + "</i></strong>."
                  )
                }

                // update datatables
                datatable_data = [];
                $.each(response["id"], function(i, genome_id) {
                  datatable_data.push([
                    response["avg_pct_id"][i],
                    [genome_id, response["npdc_id"][i]],
                    response["genome_gtdb_species"][i] != ""? response["genome_gtdb_species"][i]:(response["genome_gtdb_genus"][i] + " spp."),
                    response["genome_mash_species"][i],
                    {
                        "grade": response["grade"][i],
                        "cleaned": response["is_cleaned_up"][i],
                    },
                    response["genome_gc"][i],
                    response["num_bgcs"][i],
                    Array.from(new Set(response["name_bgcs_mibig"][i].split(";")))
                  ]);
                });
                break;

              case "bgc":
                // update summary
                summary_content = "0 hits found."
                if (response["id"].length > 0) {
                  let count_bgc = response["id"].length;
                  let count_gcf = new Set(response["gcf"]).size;
                  let count_genome = new Set(response["genome_id"]).size;
                  let count_species = new Set(response["mash_species"]).size;
                  let count_most_class = "";
                  let count_most_class_pct = 0;
                  let count_class = {};
                  $.each(response["name_class"], function(i, class_str) {
                    class_str = Array.from(new Set(class_str.split("|"))).sort();
                    class_str = [class_str.join("/")]; // comment for per-class splits
                    $.each(class_str, function(j, class_name) {
                      count_class[class_name] ? ++count_class[class_name] : count_class[class_name] = 1
                    })
                  });
                  $.each(count_class, function(class_name, count) {
                    if ((count > count_most_class_pct) || (count_most_class_pct == 0)) {
                      count_most_class = class_name;
                      count_most_class_pct = count;
                    }
                  });
                  count_most_class_pct = (count_most_class_pct / count_bgc * 100).toFixed(0);
                  let count_most_genus = "";
                  let count_most_genus_pct = 0;
                  $.each(response["genus"].reduce(function (acc, curr) {
                    return acc[curr] ? ++acc[curr] : acc[curr] = 1, acc
                  }, {}), function(genus, count) {
                    if ((count > count_most_genus_pct) || (count_most_genus_pct == 0)) {
                      count_most_genus = genus;
                      count_most_genus_pct = count;
                    }
                  });
                  count_most_genus_pct = (count_most_genus_pct / count_genome * 100).toFixed(0);
                  summary_content = (
                    "Your query is found in <strong>" + count_bgc.toLocaleString("en-US") + "</strong> BGC(s), forming a total of <strong>" + count_gcf.toLocaleString("en-US") + "</strong> GCF(s)." +
                    " The main biosynthetic class of the BGCs is <strong>" + count_most_class + " (" + count_most_class_pct.toLocaleString("en-US") + "%)</strong>." +
                    " These BGCs were coming from  <strong>" + count_genome.toLocaleString("en-US") + "</strong> genome(s) of <strong>" + count_species.toLocaleString("en-US") + "</strong> different Mash cluster(s)." +
                    " Most of the BGCs, <strong>" + count_most_genus_pct.toLocaleString("en-US") + "%</strong>, were coming from" +
                    " the genus <strong><i>" + count_most_genus + "</i></strong>."
                  )
                }

                // update datatables
                $.each(response["id"], function(i, bgc_id) {
                  datatable_data.push([
                    response["avg_pct_id"][i],
                    [response["genome_id"][i], response["npdc_id"][i]],
                    response["species"][i] != ""? response["species"][i]:(response["genus"][i] + " spp."),
                    response["mash_species"][i],
                    response["contig_num"][i],
                    [response["id"][i], response["npdc_id"][i], response["contig_num"][i], response["orig_identifier"][i]],
                    response["gcf"][i],
                    response["fragmented"][i],
                    Array.from(new Set(response["name_class"][i].split("|"))).sort(),
                    ((response["nt_end"][i] - response["nt_start"][i]) / 1000).toFixed(0),
                    response["num_cds"][i],
                    [response["mibig_hit_id"][i], response["mibig_hit_name"][i], response["mibig_hit_pct"][i], response["knowncb_cutoff"][i]]
                  ]);
                });
                break;
            }
            if (datatable_data.length < 1) {
              $(".blast_result_download_btn").addClass("disabled");
            } else {
              $(".blast_result_download_btn").removeClass("disabled");
            }
            
            $("#section_results_by_" + show_result + "_summary").html(summary_content);
            $("#section_results_by_" + show_result + "_table").DataTable().rows.add(datatable_data).draw();
            $("#section_results_by_genome_summary").removeClass("alert-warning");
            $("#section_results_by_bgc_summary").removeClass("alert-warning");
            $("#section_results_by_genome_summary").addClass("alert-success");
            $("#section_results_by_bgc_summary").addClass("alert-success");
            $("#select_result_update_btn").removeClass("disabled");

            $("#select_result_selected_text").html(
              "Current selected inputs: " + selected_type.siblings(".form-check-label").text() +
              " / " + (prot_id == 0? "All" : selected_prot.siblings(".form-check-label").text())
            );

          }
        });

      }

      $("#select_result_update_btn").click(function() { updateShowResult(); });

      updateShowResult();
    });
  </script>
  {% endif%}

{% endblock %}